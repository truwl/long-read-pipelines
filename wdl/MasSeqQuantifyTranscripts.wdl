version 1.0

import "tasks/Utils.wdl" as Utils

import "tasks/TranscriptAnalysis/Preprocessing_Tasks.wdl" as PREPROCESS
import "tasks/TranscriptAnalysis/Salmon_Tasks.wdl" as SALMON
import "tasks/TranscriptAnalysis/Flair_Tasks.wdl" as FLAIR

workflow MasSeqQuantifyTranscripts {

    meta {
        description : "Quantify transcripts present in annotated array element reads using SALMON.  Assumes input data were generated by MASSeq and created by the PB10xMasSeqArraySingleFlowcell workflow (or similar)."
        author : "Jonn Smith"
        email : "jonn@broadinstitute.org"
    }

    input {
        File array_element_bam
        File transcript_fasta = "gs://broad-dsde-methods-long-reads/resources/gencode_v34/gencode.v34.pc_transcripts.fa"
        File salmon_index_tar_gz = "gs://broad-dsde-methods-long-reads/resources/gencode_v34/gencode.v34.pc_transcripts_index_k31.tar.gz"
    }

    parameter_meta {
        array_element_bam : "Bam file containing aligned arrayy elements that have been annotated with the 10x tool."
        transcript_fasta : "[optional] FASTA file containing isoforms sequences to quantify for use with Flair.  Defaults to GENCODE v34."
        salmon_index_tar_gz : "[optional] SALMON index file corresponding to the transcripts FASTA file used to quantify the transcripts in the reads (TAR.GZ format).  Defaults to GENCODE v34."
    }

    ################################################################################
    # Split the array elements into individual files by sample and cell barcode:
    call PREPROCESS.SplitBamBySampleAndCellBarcodeTask as split_reads {
        input:
            aligned_annotated_bam = array_element_bam
    }

#    ################################################################################
#    # Run FLAIR for transcript analysis:
#    call FLAIR.FlairQuant as flair_quant {
#        input:
#            fasta_tar_gz = split_reads.fasta_tar_gz_out,
#            transcript_isoforms_fasta = transcript_fasta
#    }
#
    ################################################################################
    # Run SALMON for single cell transcript analysis:
    # This is a BAD way to run SALMON.  Need to do this in blocks.
    scatter (reads_fasta in split_reads.sample_cell_barcode_fasta_files) {
        call SALMON.RunSalmonQuantTask as salmon_quant {
            input:
            reads_fasta = reads_fasta,
            salmon_index_tar_gz = salmon_index_tar_gz,
            extra_args = "--fldMean 751 --fldSD 460 --minAssignedFrags 1"
        }
    }

    call SALMON.ConvertQuantFileToCountMatrix as make_salmon_count_matrix {
        input:
            quant_files = salmon_quant.quant_file
    }

    ################################################################################
    # Run SALMON for bulk transcript analysis:

    call Utils.BamToFasta as CreateArrayElementFasta {
        input:
            bam = array_element_bam
    }

    call SALMON.RunSalmonQuantTask as salmon_bulk_quant {
        input:
            reads_fasta = CreateArrayElementFasta.fasta,
            salmon_index_tar_gz = salmon_index_tar_gz,
            extra_args = "--fldMean 751 --fldSD 460 --minAssignedFrags 1"
    }

    call SALMON.ConvertQuantFileToCountMatrix as make_salmon_bulk_count_matrix {
        input:
            quant_files = [ salmon_bulk_quant.quant_file ]
    }

#    ################################################################################
#    # Run PB IsoSeq for transcript analysis:
#    scatter (reads_fasta in split_reads.sample_cb_fasta_files) {
#        call PB.RefineTranscriptReads {
#            input:
#                bam          = demux_bam,
#                barcode_file = barcode_file,
#                prefix       = "~{SM[0]}.~{ID[0]}.flnc"
#        }
#
#        call PB.ClusterTranscripts {
#            input:
#                bam          = RefineTranscriptReads.refined_bam,
#                prefix       = "~{SM[0]}.~{ID[0]}.clustered"
#        }
#
#        call PB.Align as AlignTranscripts {
#            input:
#                bam          = ClusterTranscripts.clustered_bam,
#                ref_fasta    = ref_fasta,
#                sample_name  = SM[0],
#                map_preset   = "ISOSEQ",
#                prefix       = "~{SM[0]}.~{ID[0]}",
#                runtime_attr_override = { "cpu_cores": 32 }
#        }
#
#        call PB.CollapseTranscripts {
#            input:
#                bam          = AlignTranscripts.aligned_bam,
#                prefix       = "~{SM[0]}.~{ID[0]}.collapsed"
#        }
#
#        call TAMA.CollapseIsoforms {
#            input:
#                bam          = AlignTranscripts.aligned_bam,
#                ref_fasta    = ref_fasta,
#                prefix       = "~{SM[0]}.~{ID[0]}.collapsed"
#        }
#    }

    output {
#        File cell_fasta_gz                   = split_reads.fasta_tar_gz_out
#
#        File flair_manifest                  = split_reads.flair_manifest
#        File flair_count_matrix              = flair_quant.count_matrix

        Array[File] salmon_quant_files       = salmon_quant.quant_file
        Array[File] salmon_cmd_infos         = salmon_quant.cmd_info
        Array[File] salmon_lib_format_counts = salmon_quant.lib_format_counts
        Array[File] salmon_ambig_infos       = salmon_quant.ambig_info
        Array[File] salmon_eq_classes        = salmon_quant.eq_classes
        Array[File] salmon_expected_biases   = salmon_quant.expected_bias
        Array[File] salmon_flds              = salmon_quant.fld
        Array[File] salmon_meta_infos        = salmon_quant.meta_info
        Array[File] salmon_observed_biases   = salmon_quant.observed_bias
        Array[File] salmon_observed_bias_3ps = salmon_quant.observed_bias_3p
        Array[File] salmon_logs              = salmon_quant.log

        File salmon_single_cell_count_matrix_tsv         = make_salmon_count_matrix.count_matrix_tsv
        File salmon_single_cell_count_matrix_h5ad        = make_salmon_count_matrix.count_matrix_h5ad

        File salmon_bulk_count_matrix_tsv         = make_salmon_bulk_count_matrix.count_matrix_tsv
        File salmon_bulk_count_matrix_h5ad        = make_salmon_bulk_count_matrix.count_matrix_h5ad

    }
}
